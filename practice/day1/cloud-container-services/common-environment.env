# 공통 환경 설정 파일
# Cloud Intermediate 과정용 공통 설정
# 
# 사용법: source common-environment.env
# 또는: export $(cat common-environment.env | xargs)

# =============================================================================
# 공통 설정
# =============================================================================
export PROJECT_NAME="cloud-intermediate"
export ENVIRONMENT="development"
export DEBUG_MODE="true"
export LOG_LEVEL="INFO"

# =============================================================================
# 색상 및 로깅 설정
# =============================================================================
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[1;33m'
export BLUE='\033[0;34m'
export PURPLE='\033[0;35m'
export CYAN='\033[0;36m'
export NC='\033[0m'

# =============================================================================
# 로그 함수 정의
# =============================================================================
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_header() { echo -e "${PURPLE}=== $1 ===${NC}"; }
log_step() { echo -e "${CYAN}[STEP]${NC} $1"; }

# =============================================================================
# 유틸리티 함수
# =============================================================================
check_command() {
    local cmd="$1"
    if command -v "$cmd" &> /dev/null; then
        log_success "✅ $cmd: 설치됨"
        return 0
    else
        log_error "❌ $cmd: 설치되지 않음"
        return 1
    fi
}

check_environment() {
    local provider="$1"
    case "$provider" in
        "aws")
            check_command "aws" && check_command "kubectl" && check_command "eksctl"
            ;;
        "gcp")
            check_command "gcloud" && check_command "kubectl"
            ;;
        *)
            log_error "지원하지 않는 프로바이더: $provider"
            return 1
            ;;
    esac
}

# =============================================================================
# 디렉토리 설정
# =============================================================================
export TOOLS_DIR="$(dirname "$0")"
export AUTOMATION_DIR="$(dirname "$TOOLS_DIR")/automation"
export SAMPLES_DIR="$(dirname "$TOOLS_DIR")/samples"
export LOGS_DIR="$TOOLS_DIR/logs"

# =============================================================================
# 로그 디렉토리 생성
# =============================================================================
mkdir -p "$LOGS_DIR"

# =============================================================================
# 타임스탬프 설정
# =============================================================================
export TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
export LOG_FILE="$LOGS_DIR/cloud-intermediate_${TIMESTAMP}.log"

# =============================================================================
# 로그 함수 (파일 출력 포함)
# =============================================================================
log_to_file() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

log_info_file() { 
    log_info "$1"
    log_to_file "INFO: $1"
}

log_success_file() { 
    log_success "$1"
    log_to_file "SUCCESS: $1"
}

log_warning_file() { 
    log_warning "$1"
    log_to_file "WARNING: $1"
}

log_error_file() { 
    log_error "$1"
    log_to_file "ERROR: $1"
}

# =============================================================================
# 에러 처리 설정
# =============================================================================
set -e
set -u
set -o pipefail

# =============================================================================
# 트랩 설정 (스크립트 종료 시 정리)
# =============================================================================
cleanup() {
    log_info "스크립트 종료 시 정리 작업 수행"
    # 필요한 정리 작업 수행
}

trap cleanup EXIT

# =============================================================================
# 진행 상황 추적
# =============================================================================
export PROGRESS_FILE="$LOGS_DIR/progress_${TIMESTAMP}.json"

init_progress() {
    cat > "$PROGRESS_FILE" << EOF
{
    "timestamp": "$TIMESTAMP",
    "status": "started",
    "steps": [],
    "resources": {
        "created": [],
        "existing": [],
        "modified": [],
        "deleted": []
    },
    "errors": []
}
EOF
}

update_progress() {
    local step="$1"
    local status="$2"
    local message="$3"
    
    # JSON 업데이트 (jq가 있는 경우)
    if command -v jq &> /dev/null; then
        jq --arg step "$step" --arg status "$status" --arg message "$message" \
           '.steps += [{"step": $step, "status": $status, "message": $message, "timestamp": now}]' \
           "$PROGRESS_FILE" > "$PROGRESS_FILE.tmp" && mv "$PROGRESS_FILE.tmp" "$PROGRESS_FILE"
    else
        # jq가 없는 경우 간단한 로그 추가
        echo "$(date '+%Y-%m-%d %H:%M:%S') - $step: $status - $message" >> "$PROGRESS_FILE"
    fi
}

# =============================================================================
# 리소스 상태 확인
# =============================================================================
check_resource_exists() {
    local resource_type="$1"
    local resource_name="$2"
    local provider="$3"
    
    case "$provider" in
        "aws")
            case "$resource_type" in
                "cluster")
                    aws eks describe-cluster --name "$resource_name" &> /dev/null
                    ;;
                "vpc")
                    aws ec2 describe-vpcs --filters "Name=tag:Name,Values=$resource_name" &> /dev/null
                    ;;
                *)
                    log_warning "알 수 없는 리소스 타입: $resource_type"
                    return 1
                    ;;
            esac
            ;;
        "gcp")
            case "$resource_type" in
                "cluster")
                    gcloud container clusters describe "$resource_name" --zone="$GCP_ZONE" &> /dev/null
                    ;;
                "vpc")
                    gcloud compute networks describe "$resource_name" &> /dev/null
                    ;;
                *)
                    log_warning "알 수 없는 리소스 타입: $resource_type"
                    return 1
                    ;;
            esac
            ;;
        *)
            log_error "지원하지 않는 프로바이더: $provider"
            return 1
            ;;
    esac
}

# =============================================================================
# 진행 상황 요약 보고
# =============================================================================
generate_summary() {
    log_header "실행 요약 보고"
    
    if [ -f "$PROGRESS_FILE" ]; then
        if command -v jq &> /dev/null; then
            local created_count=$(jq '.resources.created | length' "$PROGRESS_FILE")
            local existing_count=$(jq '.resources.existing | length' "$PROGRESS_FILE")
            local modified_count=$(jq '.resources.modified | length' "$PROGRESS_FILE")
            local deleted_count=$(jq '.resources.deleted | length' "$PROGRESS_FILE")
            local error_count=$(jq '.errors | length' "$PROGRESS_FILE")
            
            log_info "📊 리소스 상태:"
            log_info "  - 새로 생성: $created_count개"
            log_info "  - 기존 사용: $existing_count개"
            log_info "  - 수정됨: $modified_count개"
            log_info "  - 삭제됨: $deleted_count개"
            log_info "  - 오류: $error_count개"
        else
            log_info "📊 진행 상황 파일: $PROGRESS_FILE"
        fi
    else
        log_warning "진행 상황 파일을 찾을 수 없습니다."
    fi
}

# =============================================================================
# =============================================================================
# GitHub 설정
# =============================================================================
export GITHUB_REPO="cloud-intermediate-repo"
export GITHUB_ORG="your-github-org"
export GITHUB_TOKEN=""

# =============================================================================
# 초기화
# =============================================================================
init_progress
log_info "공통 환경 설정 로드 완료"